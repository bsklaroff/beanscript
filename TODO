parse and use typedefs during type inference
infer types of non-typeinst (un-overloaded) fn defs
- constrain non-typeinst fn call arg / return types to their corresponding fn defs
concatenate prelude to beginning of running program
add error handling with pretty error messages
add command-line args to display each output stage
add tests
allow more complex typeclasses
allow generalized fn defs inside typeclasses
deal with more complex types (arrays, etc)
deal with object dot-access
centralize handling of void type
optimize redundant local vars (SSA)
inline functions when possible
package as npm package

LONG TERM IDEAS
indent based
- js-esque bracket-based version with alternative filename
underscore_case pragma
currying syntactic sugar
promises built in
- any function can be easily wrapped in a promise
- cancelable
- async / await or .then syntax?
functional language constructs built in
by default, functions do not inherit parent scope
- can be made a closure with =>, which also takes care of @
strong typing with type inference
- kinds
compatible with js
- can require js or bs as modules
- use npm
js2bs and coffee2bs interactive migration helpers
easy ENUM creation
custom "data views" over efficient underlying arrays
macros?
- alternative lisp output / code syntax?
allow operator overloading
generalized ffi to easily incorporate c libs
automatic memoization decorator
super long-term: SIMD / GPU / FPGA support
self-optimization
