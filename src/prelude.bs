typeclass show a
  print :: (a) -> void

typeclass eq a <= (show)
  __eq__ :: (a, a) -> bool
  __neq__ :: (a, a) -> bool

typeclass cmp a <= (eq)
  __lt__ :: (a, a) -> bool
  __lte__ :: (a, a) -> bool
  __gt__ :: (a, a) -> bool
  __gte__ :: (a, a) -> bool

typeclass num a <= (cmp)
  __add__ :: (a, a) -> a
  __sub__ :: (a, a) -> a
  __mul__ :: (a, a) -> a
  __div__ :: (a, a) -> a
  __neg__ :: (a) -> a

typeinst num i32
  print: (x) ->
    ((i32.store (i32.const 0) x))
    ((call $print (i32.const 0)))
  __eq__: (x, y) -> ((i32.eq x y))
  __neq__: (x, y) -> ((i32.ne x y))
  __lt__: (x, y) -> ((i32.lt_s x y))
  __lte__: (x, y) -> ((i32.le_s x y))
  __gt__: (x, y) -> ((i32.gt_s x y))
  __gte__: (x, y) -> ((i32.ge_s x y))
  __add__: (x, y) -> ((i32.add x y))
  __sub__: (x, y) -> ((i32.sub x y))
  __mul__: (x, y) -> ((i32.mul x y))
  __div__: (x, y) -> ((i32.div_s x y))
  __neg__: (x) -> ((i32.sub (i32.const 0) x))

typeinst num i64
  print: (x) ->
    ((i64.store (i32.const 0) x))
    ((call $print (i32.const 1)))
  __eq__: (x, y) -> ((i64.eq x y))
  __neq__: (x, y) -> ((i64.ne x y))
  __lt__: (x, y) -> ((i64.lt_s x y))
  __lte__: (x, y) -> ((i64.le_s x y))
  __gt__: (x, y) -> ((i64.gt_s x y))
  __gte__: (x, y) -> ((i64.ge_s x y))
  __add__: (x, y) -> ((i64.add x y))
  __sub__: (x, y) -> ((i64.sub x y))
  __mul__: (x, y) -> ((i64.mul x y))
  __div__: (x, y) -> ((i64.div_s x y))
  __neg__: (x) -> ((i64.sub (i64.const 0) x))

typeinst eq bool
  print: (x) ->
    ((i32.store (i32.const 0) x))
    ((call $print (i32.const 2)))
  __eq__: (x, y) -> ((i32.eq x y))
  __neq__: (x, y) -> ((i32.ne x y))

###
Array methods
###

@len :: (arr<a>) -> i32
@len = (arr) -> ((i32.load &arr))

# TODO: check array bounds
@__arr_set__ :: (arr<a>, i32, a) -> void
@__arr_set__ = (arr, idx, val) ->
  heapOffset :: i32
  heapLoc :: i32
  heapOffset = ((i32.mul (i32.add (i32.const 1) idx) (i32.const 4)))
  heapLoc = ((i32.add &arr heapOffset))
  ((i32.store heapLoc &val))

# TODO: check array bounds
@__arr_get__ :: (arr<a>, i32) -> a
@__arr_get__ = (arr, idx) ->
  heapOffset :: i32
  heapLoc :: i32
  heapOffset = ((i32.mul (i32.add (i32.const 1) idx) (i32.const 4)))
  heapLoc = ((i32.add &arr heapOffset))
  return_ptr ((i32.load heapLoc))

